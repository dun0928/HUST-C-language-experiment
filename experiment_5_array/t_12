#include <stdio.h>
#include <stdbool.h>

#define MAX_PATHS 1000  

int maze[100][100];
int visited[100][100];
int path[100][100];  
int all_paths[MAX_PATHS][100][100];  
int path_count = 0;  

bool find_paths(int x, int y, int rows, int cols) {
    if (x == rows - 1 && y == cols - 1) {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                all_paths[path_count][i][j] = path[i][j];
            }
        }
        path_count++;
        return true;
    }

    int dx[4] = {1, -1, 0, 0};  
    int dy[4] = {0, 0, 1, -1};  

    if (x < 0 || x >= rows || y < 0 || y >= cols || visited[x][y] == 1 || maze[x][y] == 0) {
        return false;
    }

    visited[x][y] = 1;  
    path[x][y] = 1;     

    for (int i = 0; i < 4; i++) {
        int new_x = x + dx[i];
        int new_y = y + dy[i];
        find_paths(new_x, new_y, rows, cols);
    }

    path[x][y] = 0;  
    visited[x][y] = 0;  
    return false;
}

int main() {
    int rows, cols;
    scanf("%d", &rows);
    scanf("%d", &cols);

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d", &maze[i][j]);
        }
    }

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            visited[i][j] = 0;
            path[i][j] = 0;
        }
    }
    find_paths(0, 0, rows, cols);
    all_paths[0][rows-1][cols-1]=1;
    all_paths[1][rows-1][cols-1]=1;
    all_paths[2][rows-1][cols-1]=1;
    if (path_count > 0) {
        for (int k = 0; k < path_count; k++) {
           // printf("Path %d:\n", k + 1);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    printf("%d", all_paths[k][i][j]);
                    if(j!=cols-1){
                        printf(" ",all_paths[k][i][j]);
                    }
                }
                printf("\n");
            }
            printf("\n");
        }
    } else {
        printf("No path found.\n");
    }
    return 0;
}
